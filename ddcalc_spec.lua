local lester = require"lester"
local describe, it, expect = lester.describe, lester.it, lester.expect

local ddcalc = require"ddcalc"

describe("math", function()
	describe("avg", function()
		it("1,2,3,4", function()
			expect.equal(math.avg(1,2,3,4), 2.5)
		end)
		it("10,2,3,4", function()
			expect.equal(math.avg(10,2,3,4), 4.75)
		end)
		it("1,2,3,4,5", function()
			expect.equal(math.avg(1,2,3,4,5), 3)
		end)
	end)
	describe("sum", function()
		it("1,2,3,4", function()
			expect.equal(math.sum(1,2,3,4), 10)
		end)
	end)
	describe("sum", function()
		it("10,2,3,4", function()
			expect.equal(math.sum(10,2,3,4), 19)
		end)
	end)
end)

describe("date", function()
	describe("dur", function()
		it("+2d", function()
			expect.equal((date():adddays(2) - date()):dur(), "2 0:0:0")
		end)
		it("+2h", function()
			expect.equal((date():addhours(2) - date()):dur(), "0 2:0:0")
		end)
		it("+2m", function()
			expect.equal((date():addminutes(2) - date()):dur(), "0 0:2:0")
		end)
		it("+2s", function()
			expect.equal((date():addseconds(2) - date()):dur(), "0 0:0:2")
		end)
		it("+2d+2h+2s", function()
			expect.equal((date():adddays(2):addhours(2):addminutes(2):addseconds(2) - date()):dur(), "2 2:2:2")
		end)
		it("-2d", function()
			expect.equal((date():adddays(-2) - date()):dur(), "-2 0:0:0")
		end)
		it("-2h", function()
			expect.equal((date():addhours(-2) - date()):dur(), "0 -2:0:0")
		end)
		it("-2m", function()
			expect.equal((date():addminutes(-2) - date()):dur(), "0 0:-2:0")
		end)
		it("-2s", function()
			expect.equal((date():addseconds(-2) - date()):dur(), "0 0:0:-2")
		end)
		it("-2d-2h-2s", function()
			expect.equal((date():adddays(-2):addhours(-2):addminutes(-2):addseconds(-2) - date()):dur(), "-2 -2:-2:-2")
		end)
	end)
	describe("from_dur", function()
		-- TODO does return a date object, simply format with a fmt string and check this one
		-- function date.from_dur(o)
		-- has to error if unknown key given
		-- check no keys/values given
		-- check empty table
		-- check values > 24/60
		-- check multiple values set
	end)
end)

describe("int", function()
	describe("from_bytes", function()
		it("big, {233, 159}", function()
			expect.equal(int.from_bytes("big", 233, 159), 59807)
		end)
		it("little, {233, 159}", function()
			expect.equal(int.from_bytes("little", 233, 159), 40937)
		end)
	end)
	describe("to_bytes", function()
		it("big, 3, 59807", function()
			expect.equal(int.to_bytes("big", 3, 59807), {0, 233, 159})
		end)
		it("little, 3, 40937", function()
			expect.equal(int.to_bytes("little", 3, 40937), {233, 159, 0})
		end)
	end)
end)

describe("string", function()
	describe("format", function()
		it("%b %x", function()
			expect.equal(string.format("'%b' '%x'", 3, 16), "'11' '10'")
		end)
		it("%3b %10x", function()
			expect.equal(string.format("'%3b' '%10x'", 3, 16), "' 11' '        10'")
		end)
		it("%03b %010x", function()
			expect.equal(string.format("'%03b' '%010x'", 3, 16), "'011' '0000000010'")
		end)
		it("%s %b %x", function()
			expect.equal(string.format("'%s' '%b' '%x'", "foo", 3, 16), "'foo' '11' '10'")
		end)
		it("%5s %3b %10x", function()
			expect.equal(string.format("'%5s' '%3b' '%10x'", "foo", 3, 16), "'  foo' ' 11' '        10'")
		end)
		it("%-5s %03b %010x", function()
			expect.equal(string.format("'%-5s' '%03b' '%010x'", "foo", 3, 16), "'foo  ' '011' '0000000010'")
		end)
	end)
end)
